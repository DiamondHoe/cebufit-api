// <auto-generated />
using System;
using CebuFitApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CebuFitApi.Migrations
{
    [DbContext(typeof(CebuFitApiDbContext))]
    [Migration("20231229150426_RelationsCd5")]
    partial class RelationsCd5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatalogueRecipe", b =>
                {
                    b.Property<Guid>("CataloguesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.HasKey("CataloguesId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("CatalogueRecipe");
                });

            modelBuilder.Entity("CebuFitApi.Models.Catalogue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Catalogue");
                });

            modelBuilder.Entity("CebuFitApi.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CebuFitApi.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("CebuFitApi.Models.Macro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<decimal>("Carb")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Fat")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Protein")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Salt")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SaturatedFattyAcid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sugar")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Macro");
                });

            modelBuilder.Entity("CebuFitApi.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Doable")
                        .HasColumnType("boolean");

                    b.Property<bool>("Eaten")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("CebuFitApi.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UnitWeight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CebuFitApi.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("CebuFitApi.Models.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("IngredientMeal", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MealsId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MealsId");

                    b.HasIndex("MealsId");

                    b.ToTable("IngredientMeal");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("CebuFitApi.Models.Ingredient", b =>
                {
                    b.HasBaseType("CebuFitApi.Models.Product");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("CebuFitApi.Models.StorageItem", b =>
                {
                    b.HasBaseType("CebuFitApi.Models.Product");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("expirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("StorageId");

                    b.ToTable("StorageItem", (string)null);
                });

            modelBuilder.Entity("CatalogueRecipe", b =>
                {
                    b.HasOne("CebuFitApi.Models.Catalogue", null)
                        .WithMany()
                        .HasForeignKey("CataloguesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CebuFitApi.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CebuFitApi.Models.Macro", b =>
                {
                    b.HasOne("CebuFitApi.Models.Product", "Product")
                        .WithOne("Macro")
                        .HasForeignKey("CebuFitApi.Models.Macro", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CebuFitApi.Models.Meal", b =>
                {
                    b.HasOne("CebuFitApi.Models.Day", "Day")
                        .WithMany("Meals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CebuFitApi.Models.Recipe", "Recipe")
                        .WithMany("Meals")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CebuFitApi.Models.Product", b =>
                {
                    b.HasOne("CebuFitApi.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IngredientMeal", b =>
                {
                    b.HasOne("CebuFitApi.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CebuFitApi.Models.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("CebuFitApi.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CebuFitApi.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CebuFitApi.Models.Ingredient", b =>
                {
                    b.HasOne("CebuFitApi.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("CebuFitApi.Models.Ingredient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CebuFitApi.Models.StorageItem", b =>
                {
                    b.HasOne("CebuFitApi.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("CebuFitApi.Models.StorageItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CebuFitApi.Models.Storage", "Storage")
                        .WithMany("StorageItems")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("CebuFitApi.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CebuFitApi.Models.Day", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("CebuFitApi.Models.Product", b =>
                {
                    b.Navigation("Macro");
                });

            modelBuilder.Entity("CebuFitApi.Models.Recipe", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("CebuFitApi.Models.Storage", b =>
                {
                    b.Navigation("StorageItems");
                });
#pragma warning restore 612, 618
        }
    }
}
